#include "xbox_hid.h"

// 重写从SerialDedvice里面继承的串口数据处理虚函数
void xbox::handleReceiveData(uint8_t byte){
	switch (state_){
	// 帧头
    case WAITING_FOR_HEADER_0:
        if (byte == FRAME_HEAD_0_XBOX){
            state_ = WAITING_FOR_HEADER_1;
            rx_frame_mat.frame_head[0] = byte;					// 存储帧头
        }
        break;
    case WAITING_FOR_HEADER_1:
        if (byte == FRAME_HEAD_1_XBOX){
            state_ = WAITING_FOR_ID;
            rx_frame_mat.frame_head[1] = byte;					// 存储帧头
        }
        else{
            state_ = WAITING_FOR_HEADER_0;
        } 
        break;
	// ID
    case WAITING_FOR_ID:
        rx_frame_mat.frame_id = byte; 							// 存储帧ID
        state_ = WAITING_FOR_LENGTH;
        break;
	// 数据长度
    case WAITING_FOR_LENGTH:
        rx_frame_mat.data_length = byte; 						// 存储数据长度
        rxIndex_ = 0;
        state_ = WAITING_FOR_DATA;
        break;
	// 数据接收
    case WAITING_FOR_DATA:
        rx_frame_mat.rx_temp_data_mat[rxIndex_++] = byte;		// 存储接收到的数据
        if (rxIndex_ >= rx_frame_mat.data_length){
            state_ = WAITING_FOR_CRC_0;
        }
        break;
    case WAITING_FOR_CRC_0:
        rx_frame_mat.check_code.crc_buff[0] = byte;				// 存储CRC校验的高字节
        state_ = WAITING_FOR_CRC_1;
        break;
    case WAITING_FOR_CRC_1:
        rx_frame_mat.check_code.crc_buff[1] = byte;				// 存储CRC校验的低字节
        state_ = WAITING_FOR_END_0;
        break;
	//帧尾
    case WAITING_FOR_END_0:
        if (byte == FRAME_END_0_XBOX){
            state_ = WAITING_FOR_END_1;
            rx_frame_mat.frame_end[0] = byte;					// 存储帧尾
        }
        else{
            state_ = WAITING_FOR_HEADER_0;
        }
        break;
    case WAITING_FOR_END_1:
			if(byte == FRAME_END_1_XBOX)
			{
		     rx_frame_mat.frame_end[1] = byte; // 存储帧尾
		    // 进行CRC校验,但一直校验不通过，我猜测是洁宇的校验码码表有误
//      rx_frame_mat.crc_calculated = CRC16_Table(rx_frame_mat.rx_temp_data_mat, rx_frame_mat.data_length);
//      if(rx_frame_mat.crc_calculated == rx_frame_mat.check_code.crc_code)
//			{
					 for (uint8_t i = 0; i < rx_frame_mat.data_length; i++)
					 {
					 	rx_frame_mat.data.buff_msg[i] = rx_frame_mat.rx_temp_data_mat[i];
					 }
					 btn_update();//注意这里是先更新了上一次的按键状态再跟新此次的按键状态
					 msgs_update(rx_frame_mat.data_length, rx_frame_mat.data.buff_msg);
					 joyDataCal();
//      }
			}
        state_ = WAITING_FOR_HEADER_0;
        break;
    default:
        state_ = WAITING_FOR_HEADER_0;
        break;
    }
}

/* 更新按键上一次的按键状态 */
void xbox::btn_update(void){
	xbox_msgs.btnY_last = xbox_msgs.btnY;
	xbox_msgs.btnB_last = xbox_msgs.btnB;
	xbox_msgs.btnA_last = xbox_msgs.btnA;
	xbox_msgs.btnX_last = xbox_msgs.btnX;
	
	xbox_msgs.btnShare_last = xbox_msgs.btnShare;
	xbox_msgs.btnStart_last = xbox_msgs.btnStart;
	xbox_msgs.btnSelect_last = xbox_msgs.btnSelect;
	xbox_msgs.btnXbox_last = xbox_msgs.btnXbox;
	
	xbox_msgs.btnLB_last = xbox_msgs.btnLB;
	xbox_msgs.btnRB_last = xbox_msgs.btnRB;
	xbox_msgs.btnLS_last = xbox_msgs.btnLS;
	xbox_msgs.btnRS_last = xbox_msgs.btnRS;
	
	xbox_msgs.btnDPadUp_last = xbox_msgs.btnDPadUp;
	xbox_msgs.btnDPadLeft_last = xbox_msgs.btnDPadLeft;
	xbox_msgs.btnDPadRight_last = xbox_msgs.btnDPadRight;
	xbox_msgs.btnDPadDown_last = xbox_msgs.btnDPadDown;
}

/* 将缓冲区的数据赋值到对应的按键中 */
void xbox::msgs_update(uint8_t len, uint8_t *dat){
	if(len == 28){
		// A,B,X,Y按键
		xbox_msgs.btnY = dat[0];
		xbox_msgs.btnB = dat[1];
		xbox_msgs.btnA = dat[2];
		xbox_msgs.btnX = dat[3];
		// 菜单操作键
		xbox_msgs.btnShare = dat[4];
		xbox_msgs.btnStart = dat[5];
		xbox_msgs.btnSelect = dat[6];
		xbox_msgs.btnXbox = dat[7];
		// 左右肩键
		xbox_msgs.btnLB = dat[8];
		xbox_msgs.btnRB = dat[9];
		// 左右摇杆按钮
		xbox_msgs.btnLS = dat[10];
		xbox_msgs.btnRS = dat[11];
		// 十字键
		xbox_msgs.btnDPadUp = dat[12];
		xbox_msgs.btnDPadLeft = dat[13];
		xbox_msgs.btnDPadRight = dat[14];
		xbox_msgs.btnDPadDown = dat[15];
		// 左右摇杆（霍尔值，进行合成变成float类型）
		xbox_msgs.joyLX = ((uint16_t)dat[16] << 8) | dat[17];
		xbox_msgs.joyLY = ((uint16_t)dat[18] << 8) | dat[19];
		xbox_msgs.joyRX = ((uint16_t)dat[20] << 8) | dat[21];
		xbox_msgs.joyRY = ((uint16_t)dat[22] << 8) | dat[23];
		// 左右扳机键
		xbox_msgs.trigL = ((uint16_t)dat[24] << 8) | dat[25];
		xbox_msgs.trigR = ((uint16_t)dat[26] << 8) | dat[27];
	}
}

//将摇杆的值映射到-1到1之间
void xbox::joyDataCal(void)
{
	
	if(deadzone_min < xbox_msgs.joyLX && xbox_msgs.joyLX < deadzone_max)
	{
		joy.normalizedLX = 0 ;
	}
	else
	{
		joy.normalizedLX = ( (float)xbox_msgs.joyLX - 32768.0f ) / 32768.0f;
	}
	
	if(deadzone_min < xbox_msgs.joyLY && xbox_msgs.joyLY < deadzone_max)
	{
		joy.normalizedLY = 0 ;
	}
	else
	{
		joy.normalizedLY = ( 32768.0f - (float)xbox_msgs.joyLY ) / 32768.0f;
	}
	
	if(deadzone_min < xbox_msgs.joyRX && xbox_msgs.joyRX < deadzone_max)
	{
		joy.normalizedRX = 0 ;
	}
	else
	{
		joy.normalizedRX = ( 32768.0f - (float)xbox_msgs.joyRX ) / 32768.0f;
 	}
	
	if(deadzone_min < xbox_msgs.joyRY && xbox_msgs.joyRY < deadzone_max)
	{
		joy.normalizedRY = 0 ;
	}
	else
	{
		joy.normalizedRY = ( 32768.0f - (float)xbox_msgs.joyRY ) / 32768.0f;
	}
	
	// 转化为极坐标形式(平时不需要，直接屏蔽掉)
//	joy.joyAngleL = atan2(joy.normalizedLY, joy.normalizedLX);
//	joy.joyAngleR = atan2(joy.normalizedRY, joy.normalizedRX);
//	joy.joyRadiusL = sqrt(joy.normalizedLX * joy.normalizedLX + joy.normalizedLY * joy.normalizedLY);
//	joy.joyRadiusR = sqrt(joy.normalizedRX * joy.normalizedRX + joy.normalizedRY * joy.normalizedRY);
}

// CRC16 查表
static const uint16_t CRC16Table[256] = {
    // CRC16 table as defined previously
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0};

// 计算 CRC16 校验码
uint16_t CRC16_Table(uint8_t *p, uint8_t counter)
{
    uint16_t crc = 0;
    for (uint8_t i = 0; i < counter; i++)
    {
        crc = CRC16Table[((crc >> 8) ^ p[i]) & 0xFF] ^ (crc << 8);
    }
    return crc;
}

static const uint8_t CRC8Table[] = {
    0x00, 0x5E, 0xBC, 0xE2, 0x61, 0x3F, 0xDD, 0x83, 0xC2, 0x9C, 0x7E, 0x20, 0xA3, 0xFD, 0x1F, 0x41,
    0x9D, 0xC3, 0x21, 0x7F, 0xFC, 0xA2, 0x40, 0x1E, 0x5F, 0x01, 0xE3, 0xBD, 0x3E, 0x60, 0x82, 0xDC,
    0x23, 0x7D, 0x9F, 0xC1, 0x42, 0x1C, 0xFE, 0xA0, 0xE1, 0xBF, 0x5D, 0x03, 0x80, 0xDE, 0x3C, 0x62,
    0xBE, 0xE0, 0x02, 0x5C, 0xDF, 0x81, 0x63, 0x3D, 0x7C, 0x22, 0xC0, 0x9E, 0x1D, 0x43, 0xA1, 0xFF,
    0x46, 0x18, 0xFA, 0xA4, 0x27, 0x79, 0x9B, 0xC5, 0x84, 0xDA, 0x38, 0x66, 0xE5, 0xBB, 0x59, 0x07,
    0xDB, 0x85, 0x67, 0x39, 0xBA, 0xE4, 0x06, 0x58, 0x19, 0x47, 0xA5, 0xFB, 0x78, 0x26, 0xC4, 0x9A,
    0x65, 0x3B, 0xD9, 0x87, 0x04, 0x5A, 0xB8, 0xE6, 0xA7, 0xF9, 0x1B, 0x45, 0xC6, 0x98, 0x7A, 0x24,
    0xF8, 0xA6, 0x44, 0x1A, 0x99, 0xC7, 0x25, 0x7B, 0x3A, 0x64, 0x86, 0xD8, 0x5B, 0x05, 0xE7, 0xB9,
    0x8C, 0xD2, 0x30, 0x6E, 0xED, 0xB3, 0x51, 0x0F, 0x4E, 0x10, 0xF2, 0xAC, 0x2F, 0x71, 0x93, 0xCD,
    0x11, 0x4F, 0xAD, 0xF3, 0x70, 0x2E, 0xCC, 0x92, 0xD3, 0x8D, 0x6F, 0x31, 0xB2, 0xEC, 0x0E, 0x50,
    0xAF, 0xF1, 0x13, 0x4D, 0xCE, 0x90, 0x72, 0x2C, 0x6D, 0x33, 0xD1, 0x8F, 0x0C, 0x52, 0xB0, 0xEE,
    0x32, 0x6C, 0x8E, 0xD0, 0x53, 0x0D, 0xEF, 0xB1, 0xF0, 0xAE, 0x4C, 0x12, 0x91, 0xCF, 0x2D, 0x73,
    0xCA, 0x94, 0x76, 0x28, 0xAB, 0xF5, 0x17, 0x49, 0x08, 0x56, 0xB4, 0xEA, 0x69, 0x37, 0xD5, 0x8B,
    0x57, 0x09, 0xEB, 0xB5, 0x36, 0x68, 0x8A, 0xD4, 0x95, 0xCB, 0x29, 0x77, 0xF4, 0xAA, 0x48, 0x16,
    0xE9, 0xB7, 0x55, 0x0B, 0x88, 0xD6, 0x34, 0x6A, 0x2B, 0x75, 0x97, 0xC9, 0x4A, 0x14, 0xF6, 0xA8,
    0x74, 0x2A, 0xC8, 0x96, 0x15, 0x4B, 0xA9, 0xF7, 0xB6, 0xE8, 0x0A, 0x54, 0xD7, 0x89, 0x6B, 0x35};

uint8_t CRC8_Table(uint8_t *p, uint8_t counter)
{
    uint8_t crc8 = 0;
    for (uint8_t i = 0; i < counter; i++)
    {
        crc8 = CRC8Table[crc8 ^ p[i]];
    }
    return crc8;
}

